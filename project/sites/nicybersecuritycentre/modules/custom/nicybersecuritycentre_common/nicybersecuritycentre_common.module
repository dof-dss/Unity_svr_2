<?php

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function nicybersecuritycentre_common_form_node_form_alter(&$form, FormStateInterface $form_state) {
  if ($form['#form_id'] === 'node_events_form' || $form['#form_id'] === 'node_events_edit_form') {
    // Add a custom form validation for events content type.
    $form['#validate'][] = 'nicybersecuritycentre_common_node_form_validate';
  }
}

/**
 * Validate handler for the events form timefield field.
 *
 * @see nicybersecuritycentre_common_form_node_form_alter()
 */
function nicybersecuritycentre_common_node_form_validate($form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  $start_time = $form_state->getValue('field_start_time')[0]['value'];
  $end_time = $form_state->getValue('field_start_time')[0]['value2'];
  if ($node->getType() === 'events') {
    // Don't let the end time be before the start time.
    if (empty($end_time)) {
      return;
    }
    if ($end_time <= $start_time) {
      $form_state->setErrorByName('field_start_time][0][value2', t('End time cannot be before the start time.'));
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function nicybersecuritycentre_common_entity_presave(EntityInterface $entity) {
  // This will fire when nodes are created or edited.
  if ($entity instanceof NodeInterface && $entity->bundle() === 'events') {
    // Get the parent node ID.
    $related_event_nid = $entity->get('field_related_events')->target_id;

    // Invalidate the cache on the parent node when a child node is saved.
    if (!empty($related_event_nid)) {
      $tags = ['node:' . $related_event_nid];
      Cache::invalidateTags($tags);
    }
  }
}
